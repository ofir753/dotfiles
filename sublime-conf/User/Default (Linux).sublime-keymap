[
    // Duplicate view to group 2 (like terminator)
    { "keys": ["ctrl+shift+e"], "command": "multicommand",
        "args": {
            "commands": [
                {"command": "clone_file"},
                {"command": "new_pane" },
            ]
        }
    },
    { "keys": ["ctrl+shift+w"], "command": "multicommand",
        "args": {
            "commands": [
                // {"command": "close_all", "args": {"group": 1}},
                { "command": "close_pane" },
            ]
        }
    },
    
    // Terminal override ctrl+shit+t
    { "keys": ["ctrl+shift+t"], "command": "reopen_last_file" },

    // Terminus
    // Open Terminal in new tab
    {
        "keys": ["ctrl+super+t"], "command": "terminus_open", "args": {
            "cwd": "${file_path:${folder}}"
        }
    },
    // Toggle the default shell in panel
    { "keys": ["alt+`"], "command": "toggle_terminus_panel" },
    { "keys": ["super+t"], "command": "toggle_terminus_panel" },
    // Close Terminus
    {
        "keys": ["ctrl+w"],
        "command": "terminus_close",
        "context": [{"key": "terminus_view"}]
    },
    {
        "keys": ["ctrl+shift+w"],
        "command": "terminus_close",
        "context": [{"key": "terminus_view"}]
    },
    {
        "keys": ["escape"],
        "command": "toggle_terminus_panel",
        "context": [{"key": "terminus_view"}]
    },

    // DoxyDoxygen
    {
        "keys": ["alt+d"],
        "command": "doxy_comment_nearest_entity",
        "args": {},
        "context": [
            { "key": "selector", "operator": "equal", "operand": "source, text.html.cshtml, text.jade", "match_all": true }
        ]
    },
    {
        "keys": ["alt+d"],
        "command": "doxy_update_comments",
        "args": { "reparse": true },
        "context": [
            { "key": "selector", "operator": "equal",  "operand": "comment, string.quoted.double.block.cython, string.quoted.single.block.cython, string.quoted.double.block.python, string.quoted.single.block.python, string.quoted.docstring.multi.python", "match_all": true }
        ]
    },

    // AceJump (like vimium for firefox)
    // Jump to Word
    {
        "keys": ["alt+j"],
        "command": "ace_jump_word"
    },
    // Jump to Word Select
    {
        "keys": ["alt+shift+j"],
        "command": "ace_jump_select"
    },
    // Jump to Word add Cursor
    {
        "keys": ["ctrl+alt+j"],
        "command": "ace_jump_add_cursor"
    },
    // Jump to Line
    {
        "keys": ["alt+l"],
        "command": "ace_jump_line"
    },
    // Jump to Line Select
    {
        "keys": ["alt+shift+l"],
        "command": "ace_jump_line_select"
    },
    // Jump to Line add Cursor
    {
        "keys": ["ctrl+shift+l"],
        "command": "ace_jump_add_cursor_line"
    },
    // Jump InLine
    {
        "keys": ["alt+q"],
        "command": "ace_jump_within_line"
    },
    // Jump InLine Select
    {
        "keys": ["alt+shift+q"],
        "command": "ace_jump_within_line_select"
    },
    // Jump InLine add Cursor
    {
        "keys": ["ctrl+shift+q"],
        "command": "ace_jump_within_line_add_cursor"
    },

    // MultiEditUtils
    // default use of selection_fields + cycle
    { "keys": ["alt+e"], "command": "selection_fields" },
    // Cycle back
    { "keys": ["alt+shift+e"], "command": "selection_fields", "args": {"jump_forward": false} },
    // add the current selections as a fields
    { "keys": ["alt+a"], "command": "selection_fields", "args": {"mode": "add"} },
    // remove current selection in selection_fields
    { "keys": ["ctrl+alt+d"], "command": "selection_fields",
      "args": {"mode": "smart", "only_other": true} },
    // cancel selection_fields and remove current selection
    { "keys": ["ctrl+alt+shift+d"], "command": "selection_fields",
      "args": {"mode": "toggle", "only_other": true} },

    // Jump to find result
    { "keys": ["f12"], "command": "prev_result", "context": 
        [{"key": "selector", "operator": "equal", "operand": "text.find-in-files" }]},
    { "keys": ["enter"], "command": "prev_result", "context": 
        [{"key": "selector", "operator": "equal", "operand": "text.find-in-files" }]},        

    // Disable sort lines binds
    { "keys": ["f9"], "command": "noop" },
    { "keys": ["ctrl+f9"], "command": "noop" },

    ///////////////////////////////////
    ///////////  DEBUGGER  ////////////
    ///////////////////////////////////
    // Start debugging
    {
        "keys": ["f5"],
        "command": "debugger", "args": {"action": "start"},
    },
    // Stop debugging
    {
        "keys": ["ctrl+f5"],
        "command": "debugger", "args": {"action": "stop"},
        "context": [
          { "key": "panel", "operand": "output.Debugger" },
          { "key": "panel_visible", "operator": "equal", "operand": true },
        ]
    },
    // Quit debugging
    {
        "keys": ["ctrl+shift+f5"],
        "command": "debugger", "args": {"action": "quit"},
        "context": [
          { "key": "panel", "operand": "output.Debugger" },
          { "key": "panel_visible", "operator": "equal", "operand": true },
        ]
    },
    // Continue
    {
        "keys": ["f6"],
        "command": "debugger", "args": {"action": "resume"},
        "context": [
          { "key": "panel", "operand": "output.Debugger" },
          { "key": "panel_visible", "operator": "equal", "operand": true },
        ]
    },
    // Pause
    {
        "keys": ["f7"],
        "command": "debugger", "args": {"action": "pause"},
        "context": [
          { "key": "panel", "operand": "output.Debugger" },
          { "key": "panel_visible", "operator": "equal", "operand": true },
        ]
    },
    // Toggle breakpoint
    {
        "keys": ["f9"],
        "command": "debugger", "args": {"action": "toggle_breakpoint"},
    },
    // Step over
    {
        "keys": ["f10"],
        "command": "debugger", "args": {"action": "step_over"},
        "context": [
          { "key": "panel", "operand": "output.Debugger" },
          { "key": "panel_visible", "operator": "equal", "operand": true },
        ]
    },
    // Step in
    {
        "keys": ["f11"],
        "command": "debugger", "args": {"action": "step_in"},
        "context": [
          { "key": "panel", "operand": "output.Debugger" },
          { "key": "panel_visible", "operator": "equal", "operand": true },
        ]
    },
    // Step out
    {
        "keys": ["ctrl+f11"],
        "command": "debugger", "args": {"action": "step_out"},
        "context": [
          { "key": "panel", "operand": "output.Debugger" },
          { "key": "panel_visible", "operator": "equal", "operand": true },
        ]
    },
    // Input command
    {
        "keys": ["shift+f5"],
        "command": "debugger", "args": {"action": "input_command"},
        "context": [
          { "key": "panel", "operand": "output.Debugger" },
          { "key": "panel_visible", "operator": "equal", "operand": true },
        ]
    },

    //////////////////////////////////
    ///////////    LSP    ////////////
    //////////////////////////////////
    // Show/Hide Diagnostics Panel
    {
        "command": "lsp_show_diagnostics_panel",
        "keys": [
            "primary+alt+s"
        ],
        "context": [
            {
                "key": "setting.lsp_active"
            }
        ]
    },
    {
        "command": "lsp_show_diagnostics_panel",
        "keys": [
            "primary+shift+s"
        ],
        "context": [
            {
                "key": "setting.lsp_active"
            }
        ]
    },
    // Go To Definition
    {
        "command": "lsp_symbol_definition",
        "args": {
            "side_by_side": false
        },
        "keys": [
            "f12"
        ],
        "context": [
            {
                "key": "lsp.session_with_capability",
                "operator": "equal",
                "operand": "definitionProvider"
            },
            {
                "key": "auto_complete_visible",
                "operator": "equal",
                "operand": false
            }
        ]
    },
    // Go To Declaration
    {
        "command": "lsp_symbol_declaration",
        "args": {
            "side_by_side": false
        },
        "keys": [
            "ctrl+f12"
        ],
        "context": [
            {
                "key": "lsp.session_with_capability",
                "operator": "equal",
                "operand": "declarationProvider"
            },
            {
                "key": "auto_complete_visible",
                "operator": "equal",
                "operand": false
            }
        ]
    },
    // Rename Symbol
    {
        "command": "lsp_symbol_rename",
        "keys": [
            "f2"
        ],
        "context": [
            {
                "key": "lsp.session_with_capability",
                "operator": "equal",
                "operand": "renameProvider"
            }
        ]
    },
    // Find Symbol References
    {
        "command": "lsp_symbol_references",
        "keys": [
            "f3"
        ],
        "context": [
            {
                "key": "lsp.session_with_capability",
                "operator": "equal",
                "operand": "referencesProvider"
            },
        ]
    },
    // Document Symbols (a replacement for ST's "Goto Symbol")
    {
        "command": "lsp_document_symbols",
        "keys": [
            "primary+r"
        ],
        "context": [
            {
                "key": "lsp.session_with_capability",
                "operator": "equal",
                "operand": "documentSymbolProvider"
            }
        ]
    },
    // Workspace Symbols (a replacement for ST's "Goto Symbol In Project")
    {
        "command": "lsp_workspace_symbols",
        "keys": [
            "primary+shift+r"
        ],
        "context": [
            {
                "key": "lsp.session_with_capability",
                "operator": "equal",
                "operand": "workspaceSymbolProvider"
            }
        ]
    },
    // Symbol Hover
    {
        "command": "lsp_hover",
        "keys": [
            "shift+space"
        ],
        "context": [
            {
                "key": "lsp.session_with_capability",
                "operator": "equal",
                "operand": "hoverProvider"
            }
        ]
    },
    // Show Code Actions
    {
        "command": "lsp_code_actions",
        "keys": [
            "f4"
        ],
        "context": [
            {
                "key": "lsp.session_with_capability",
                "operator": "equal",
                "operand": "codeActionProvider"
            }
        ]
    },
]
